@startuml
left to right direction
skinparam packageStyle rectangle
actor Joueur
rectangle "Jeu du labyrinthe" {
  Joueur -- (Bouger heros)
  Joueur -- (Arrêter la partie)
  (Bouger heros) .> (Lancer une partie) : include
}
@enduml

@startuml
actor Joueur
participant Système
Joueur -> Système: Démarrer le programme
Système --> Joueur: Lancer une partie
loop Tant que partie en cours
  Joueur -> Système: Bouger héros
  break Héros sur trésor ou sur monstre
    alt Héros sur monstre
      Système --> Joueur: Afficher message "Perdu"
    else Héros sur trésor
      Système --> Joueur: Afficher message "Gagné"
    end
  end
end
Système --> Joueur: Finir partie
Système --> Joueur: Terminer programme
@enduml


@startuml

page 2x2
title Balade dans un labyrinthe

package "model" #DDDDDD {

    class Position {
        -x: int
        -y: int
        --
        +isOn(Position position): boolean
        +toString(): string
    }

    interface Game {
        +evolve(Cmd userCmd)
        +isFinished(): boolean
        +isTreasure(int x, int y): boolean
        +isMonster(int x, int y): boolean
        +getHero(): Hero
        +setHero(Hero hero)
        +getWidth(): int
        +getHeight(): int
        +isWall(int x, int y): boolean
        +isTrap(int x, int y): boolean
        +isTeleporter(int x, int y): boolean
        +getTeleporter(int x, int y): Teleporter
        +getMonsters(): Monster[]
    }

    class LabyrinthGame {
        -width: int
        -height: int
        -hero: Hero
        -treasure: Treasure
        -isWall: boolean[][]
        -isTrap: boolean[][]
        -teleporters: Teleporter[][]
        -monsters: Monster[]
        --
        +evolve(Cmd userCmd)
        +isFinished(): boolean
        +isTreasure(int x, int y): boolean
        +isMonster(int x, int y): boolean
        +getHero(): Hero
        +setHero(Hero hero)
        +getWidth(): int
        +getHeight(): int
        +isWall(int x, int y): boolean
        +isTrap(int x, int y): boolean
        +isTeleporter(int x, int y): boolean
        +getTeleporter(int x, int y): Teleporter
        +getMonsters(): Monster[]
        -moveHero(Cmd commande)
        -moveMonsters()
    }

    Game <|.. LabyrinthGame

    class Entity {
        -isDead: boolean
        --
        +move(Cmd commandeEnCours)
        +isDead(): boolean
        +setDead()
    }

    Position <|-- Entity

    class Hero {

    }

    Entity <|-- Hero
    LabyrinthGame "1" -- "1" Hero

    class Monster {
        +getMove(Game game): Cmd
    }

    Entity <|-- Monster
    LabyrinthGame "1" -- "0..*" Monstre

    class Ghost {
        +getMove(Game game): Cmd
    }

    Entity <|-- Ghost

    class Treasure {

    }

    Position <|-- Treasure
    LabyrinthGame "1" -- "1" Treasure

    class Teleporter {
        -tX: int
        -tY: int
        --
        +getNextPosition(): Position
    }

    Position <|-- Teleporter

}

package "presentation" #DDDDDD {

    class DrawingPanel {
        - {static} long serialVersionUID
        - Game game
        - GamePainter painter
        - BufferedImage nextImage
        - BufferedImage currentImage
        - int width
        - int height
        --
        + drawGame()
        + paint(Graphics g)
    }

    interface GamePainter {
        + {abstract} draw(BufferedImage image, Game game)
        + {abstract} getWidth(): int
        + {abstract} getHeight(): int
    }

    class GraphicalInterface {
        - DrawingPanel panel
        - Game game
        --
        + paint()
    }

    class LabyrinthPainter {
        # {static} int WIDTH
        # {static} int HEIGHT
        - int x
        - int y
        --
        + draw(BufferedImage image, Game game)
        + getWidth(): int
        + getHeight(): int
    }
}

DrawingPanel "0" -- "1" Game : game
DrawingPanel "0" -- "1" GamePainter : painter
GraphicalInterface "0" -- "1" DrawingPanel : panel
LabyrinthPainter ..|> GamePainter

package "application" #DDDDDD {

    enum Cmd {

    }

    interface GameController {
        -Cmd commandeEnCours
        --
        +getCommand(): Cmd
    }

    class LabyrinthController {
        -Cmd commandeEnCours
        --
        +getCommand(): Cmd
        +keyPressed(KeyEvent e)
        +keyReleased(KeyEvent e)
        +keyTyped(KeyEvent e)
    }

    class GameEngineGraphical {
        -Game game
        -GamePainter gamePainter
        -GameController gameController
        -GraphicalInterface gui
        --
        +run()
    }

}

GameController <|.. LabyrinthController

LabyrinthController "0" -- "1" Cmd : commandeEnCours

GameEngineGraphical "0" -- "1" Game : game
GameEngineGraphical "0" -- "1" GamePainter : gamePainter
GameEngineGraphical "0" -- "1" GameController : gameController
GameEngineGraphical "0" -- "1" GraphicalInterface : gui



@enduml
